version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: unisearch-db
    environment:
      POSTGRES_DB: unisearch_dev
      POSTGRES_USER: unisearch_user
      POSTGRES_PASSWORD: unisearch_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/app/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U unisearch_user -d unisearch_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: unisearch-api
    environment:
      - DATABASE_URL=postgresql://unisearch_user:unisearch_password@postgres:5432/unisearch_dev
      - DEBUG=true
      - ENVIRONMENT=development
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - FRONTEND_URL=http://localhost:3000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./data_pipeline:/app/data_pipeline
    depends_on:
      postgres:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: unisearch-frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_APP_TITLE=UniSearch
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev -- --host 0.0.0.0

  # Redis (for caching)
  redis:
    image: redis:7-alpine
    container_name: unisearch-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: unisearch-network